#!/usr/bin/env node
"use strict";

const SSL_DIR = "/etc/letsencrypt/live/random-matching.tokyo";
/**
 * Module dependencies.
 */

const fs = require("fs");
const debug = require("debug")("random-matching:server");
const https = require("https");

const app = require("../app");
const socket = require("../src/socket")

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

let sslOption = {
    key : fs.readFileSync(SSL_DIR + "/privkey.pem").toString(),
    cert: fs.readFileSync(SSL_DIR + "/cert.pem").toString(),
    ca  : fs.readFileSync(SSL_DIR + "/cert.pem").toString(),
    "log level":1
}
let server = https.createServer(sslOption, app);
socket(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  let bind = typeof port === "string"
    ? "Pipe " + port
    : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === "string"
    ? "pipe " + addr
    : "port " + addr.port;
  debug("Listening on " + bind);
}

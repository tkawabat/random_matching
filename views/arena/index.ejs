<h1 class="heading">Room example</h1>


<div class="room">
   <div>
     <input type="text" placeholder="Room Name" id="js-room-id">
     <button id="js-join-trigger">Join</button>
     <button id="js-leave-trigger">Leave</button>
   </div>

   <div class="remote-streams" id="js-remote-streams"></div>

   <div>
     <pre class="messages" id="js-messages"></pre>
     <input type="text" id="js-local-text">
     <button id="js-send-trigger">Send</button>
   </div>
</div>

<button id="muteBtn">mute</button>

<script type="text/javascript" src="https://cdn.webrtc.ecl.ntt.com/skyway-latest.js"></script>
<script>
(async () => {

 const remoteVideos = document.getElementById('js-remote-streams');
 const joinTrigger = document.getElementById('js-join-trigger');
 const leaveTrigger = document.getElementById('js-leave-trigger');
 const roomId = document.getElementById('js-room-id');
 const localText = document.getElementById('js-local-text');
 const sendTrigger = document.getElementById('js-send-trigger');
 const messages = document.getElementById('js-messages');
 const muteBtn = document.getElementById("muteBtn");

 const localStream = await navigator.mediaDevices.getUserMedia({
        audio: true,
        video: false,
    })
    .catch(alert)
    ;
    
    let key = "9b68cd86-829d-4e0e-884e-bbe6c75e12e5";
    const peer = new Peer({
        key: key,
        domain: 'random-matching.tokyo',
        debug: 3,
    });

    const audioTrack = localStream.getAudioTracks()[0];
    muteBtn.addEventListener("click", () => {
        audioTrack.enabled = !audioTrack.enabled;
    });


    // Register join handler
    joinTrigger.addEventListener("click", () => {
    // Note that you need to ensure the peer has connected to signaling server
    // before using methods of peer instance.
    if (!peer.open) {
        return;
    }

    const room = peer.joinRoom(roomId.value, {
      mode: "sfu"
      , stream: localStream
    });

    room.once("open", () => {
      messages.textContent += "=== You joined ===\n";
    });
    room.on("peerJoin", peerId => {
      messages.textContent += `=== ${peerId} joined ===\n`;
    });

    // Render remote stream for new peer join in the room
    room.on("stream", async stream => {
      const newVideo = document.createElement("video");
      newVideo.srcObject = stream;
      // mark peerId to find it later at peerLeave event
      newVideo.setAttribute("data-peer-id", stream.peerId);
      remoteVideos.append(newVideo);
      await newVideo.play().catch(console.error);
    });

    room.on("data", ({ data, src }) => {
      // Show a message sent to the room and who sent
      messages.textContent += `${src}: ${data}\n`;
    });

    // for closing room members
    room.on("peerLeave", peerId => {
      const remoteVideo = remoteVideos.querySelector(
        `[data-peer-id=${peerId}]`
      );
      remoteVideo.srcObject.getTracks().forEach(track => track.stop());
      remoteVideo.srcObject = null;
      remoteVideo.remove();

      messages.textContent += `=== ${peerId} left ===\n`;
    });

    // for closing myself
    room.once("close", () => {
      sendTrigger.removeEventListener("click", onClickSend);
      messages.textContent += "== You left ===\n";
      Array.from(remoteVideos.children).forEach(remoteVideo => {
        remoteVideo.srcObject.getTracks().forEach(track => track.stop());
        remoteVideo.srcObject = null;
        remoteVideo.remove();
      });
    });

    sendTrigger.addEventListener("click", onClickSend);
    leaveTrigger.addEventListener("click", () => room.close(), { once: true });

    function onClickSend() {
      // Send message to all of the peers in the room via websocket
      room.send(localText.value);

      messages.textContent += `${peer.id}: ${localText.value}\n`;
      localText.value = "";
    }
  });

  peer.on("error", console.error);
})();
</script>
